// let counter = 0;

// const timeout = setTimeout(function fun() {
//   console.log(`timeout: ${++counter}`);

//   timeout.refresh();
// }, 2000);


// function repeat() {
//   setTimeout(() => {

//     repeat();
//   }, 2000);
// }

// repeat();

// Как можно добавить задачу(функцию) в микротаски?

// У нас есть микротаски и макротаски

// event loop - это очередь событий(queue)
// Микротаски - если сейчас на этом проходе loop
// Макротаски - добавь в луп, но выполни потом.

// Неявные микротаски: promise, process.nextTick, setImmediate,
// Явная микротаска: queueMicrotask(callback)

/*
Что происходит, когда мы в браузер вставляем в адресную строку
https://google.com и жмем Enter?
*/

// - ищет по DNS: ip
// - установить соединение - TCP. handshake
// - HTTP запрос поверх соединения TCP и ожидание
// ответа.

// Классификация IP адрес.
// 10.0.0.0, 172.16.0.0, 192.168.0.0 - это локальные адрес. 192.168.1.100
// 8.8.8.8 - глобальный адрес
// 127.0.0.1 - localhost
// 0.0.0.0 - все адреса.

// IP - это адрес + маска подсети.
// 255.255.255.0 - маски подсети или /24
// 192.168.0.0/24 - IP 192.168.0.0, маска 24. Создали подсеть. 192.168.0.1-254

// Порт. Можете объяснить что это и какие нибудь примеры?
// http://localhost:3000
// Какие порты:
// 80(8000, 8080, 8888) - HTTP
// 443 - HTTPS
// 21 - FTP
// 22 - SSH
// 23 - Telnet
// 5432 - Postgresql
// 6379 - Redis
// 27017 - MongoDB

// Linux - iptables - через неё настраивают firewall.

// По умолчанию все порты "закрыты" - это значит, что они недоступны из глобальной сети.
// Открыть порт - это д
// Мой адрес сервера - это 176.2.3.5 и на нем запущена MongoDB на порту 27017
// Открой порт 27017 для доступа всем - э
// Allow TCP connection for port 27017 for 0.0.0.0

// Открой доступ только для адреса 95.106.24.195
// Allow TCP connection for port 27017 for 95.106.24.195/32

// Закрыл все и открывай по запросу.

// 0 - 65565

// Чем отличается IPv4 от IPv6?
// 0.0.0.0 в каждом адрес от 0 до 255.
// 2a00:1450:4010:c1e::8a

// 8.8.8.8 my-google.com

// Протокол HTTP опишите его
// Из чего состоит запрос и ответ в протоколе HTTP?

// Запрос
// Title Метод - путь - протокол
// Headers
// Body

// Ответ
// Title
// Payload

// Версии протокола? HTTP1.1, HTTP2 - чем отличаются?
// HTT1.1 - это текст, HTTP2 - бинарная информацию.
// Мультиплексирование на уровне протокола.
// gRPC - HTTP2 и за счет этого он более быстрый
// HTTPS: HTTP + Secure
